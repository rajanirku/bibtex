% This file was created with JabRef 2.7b.
% Encoding: Cp1252

@INPROCEEDINGS{Calcagno-MetaOCaml,
  author = {Calcagno, Cristiano and Taha, Walid and Huang, Liwen and Leroy, Xavier},
  title = {Implementing multi-stage languages using ASTs, Gensym, and reflection},
  booktitle = {Proceedings of the 2nd international conference on Generative programming
	and component engineering},
  year = {2003},
  series = {GPCE '03},
  pages = {57--76},
  address = {New York, NY, USA},
  publisher = {Springer-Verlag New York, Inc.},
  acmid = {954190},
  isbn = {3-540-20102-5},
  location = {Erfurt, Germany},
  numpages = {20},
  url = {http://portal.acm.org/citation.cfm?id=954186.954190}
}

@MISC{scalaness-home,
  author = {Peter Chapin},
  title = {Scalaness Home Page},
  month = {October},
  year = {2013},
  note = {https://github.com/pchapin/scala. Accessed October 2013},
  owner = {Peter C. Chapin},
  timestamp = {2013-09-29},
  url = {https://github.com/pchapin/scala}
}

@INPROCEEDINGS{chapin-GPCE-2013,
  author = {Peter Chapin and Christian Skalka and Scott Smith and Michael Watson},
  title = {Scalaness/{nesT}. Type Specialized Staged Programming for Sensor
	Networks},
  booktitle = {Proceedings of the 12th International Conference on Generative Programming:
	Concepts and Experiences (GPCE '13)},
  year = {2013},
  month = {October},
  abstract = {Programming wireless embedded networks is challenging due to severe
	limitations on processing speed, memory, and bandwidth. Staged programming
	can help bridge the gap between high level code refinement techniques
	and efficient device level programs by allowing a first stage program
	to specialize device level code. Here we introduce a two stage programming
	system for wireless sensor networks. The first stage program is written
	in our extended dialect of Scala, called Scalaness, where components
	written in our type safe dialect of nesC, called nesT, are composed
	and specialized. Scalaness programs can dynamically construct TinyOS-compliant
	nesT device images that can be deployed to motes. A key result, called
	cross-stage type safety, shows that successful static type checking
	of a Scalaness program means no type errors will arise either during
	programmatic composition and specialization of WSN code, or later
	on the WSN itself. Scalaness has been implemented through direct
	modification of the Scala compiler. Implementation of a staged public-key
	cryptography calculation shows the sensor memory footprint can be
	significantly reduced by staging.},
  owner = {Peter C. Chapin},
  timestamp = {2013-10-08}
}

@INPROCEEDINGS{UrPLDI10,
  author = {Adam Chlipala},
  title = {Ur: Statically-Typed Metaprogramming with Type-Level Record Computation},
  booktitle = {PLDI},
  year = {2010}
}

@ARTICLE{289140,
  author = {Consel, C. and Hornof, L. and Marlet, R. and Muller, G. and Thibault,
	S. and Volanschi, E.-N. and Lawall, J. and Noy{\'e}, J.},
  title = {Tempo: specializing systems applications and beyond},
  journal = {ACM Comput. Surv.},
  year = {1998},
  volume = {30},
  number = {3es},
  month = sep,
  acmid = {289140},
  address = {New York, NY, USA},
  articleno = {19},
  doi = {10.1145/289121.289140},
  issn = {0360-0300},
  issue_date = {Sept. 1998},
  publisher = {ACM},
  url = {http://doi.acm.org/10.1145/289121.289140}
}

@INPROCEEDINGS{Davies-1996,
  author = {Davies, Rowan and Pfenning, Frank},
  title = {A modal analysis of staged computation},
  booktitle = {Proceedings of the 23rd ACM SIGPLAN-SIGACT symposium on Principles
	of programming languages},
  year = {1996},
  series = {POPL '96},
  pages = {258--270},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {237788},
  doi = {http://doi.acm.org/10.1145/237721.237788},
  isbn = {0-89791-769-3},
  location = {St. Petersburg Beach, Florida, United States},
  numpages = {13},
  url = {http://doi.acm.org/10.1145/237721.237788}
}

@ARTICLE{FramedML,
  author = {Liu, Yu and Skalka, Christian and Smith, Scott},
  title = {Type-specialized staged programming with process separation},
  journal = {Higher-Order and Symbolic Computation},
  year = {2012},
  volume = {24},
  pages = {341-385},
  number = {4},
  publisher = {Springer Netherlands}
}

@UNPUBLISHED{nesT,
  author = {Yu David Liu and Christian Skalka and Scott Smith},
  title = {Type Safe Staged Programming for Sensor Networks},
  note = {Unpublished manuscript}
}

@INPROCEEDINGS{FramedMLworkshop,
  author = {Liu, Yu David and Skalka, Christian and Smith, Scott},
  title = {Type-specialized staged programming with process separation},
  booktitle = {Proceedings of the 2009 ACM SIGPLAN workshop on Generic programming},
  year = {2009},
  series = {WGP '09},
  pages = {49--60},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1596622},
  doi = {http://doi.acm.org/10.1145/1596614.1596622},
  isbn = {978-1-60558-510-9},
  keywords = {polymorphism, staged programming, type specialization},
  location = {Edinburgh, Scotland},
  numpages = {12},
  url = {http://doi.acm.org/10.1145/1596614.1596622}
}

@INPROCEEDINGS{mainland12,
  author = {Mainland, Geoffrey},
  title = {Explicitly heterogeneous metaprogramming with {MetaHaskell}},
  booktitle = {ICFP},
  year = {2012},
  keywords = {linear languages, metaprogramming, open terms, quasiquotation, type
	systems}
}

@INPROCEEDINGS{Mainland-2007,
  author = {Mainland, Geoffrey},
  title = {Why it's nice to be quoted: quasiquoting for haskell},
  booktitle = {Proceedings of the ACM SIGPLAN workshop on Haskell workshop},
  year = {2007},
  series = {Haskell '07},
  pages = {73--82},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1291211},
  doi = {http://doi.acm.org/10.1145/1291201.1291211},
  isbn = {978-1-59593-674-5},
  keywords = {meta programming, quasiquoting},
  location = {Freiburg, Germany},
  numpages = {10},
  url = {http://doi.acm.org/10.1145/1291201.1291211}
}

@INPROCEEDINGS{Mainland-Flask-2008,
  author = {Mainland, Geoffrey and Morrisett, Greg and Welsh, Matt},
  title = {Flask: staged functional programming for sensor networks},
  booktitle = {Proceeding of the 13th ACM SIGPLAN international conference on functional
	programming},
  year = {2008},
  series = {ICFP '08},
  pages = {335--346},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1411251},
  doi = {http://doi.acm.org/10.1145/1411204.1411251},
  isbn = {978-1-59593-919-7},
  keywords = {meta programming},
  location = {Victoria, BC, Canada},
  numpages = {12},
  url = {http://doi.acm.org/10.1145/1411204.1411251}
}

@ARTICLE{Sheard-TemplateHaskell,
  author = {Sheard, Tim and Jones, Simon Peyton},
  title = {Template meta-programming for Haskell},
  journal = {SIGPLAN Not.},
  year = {2002},
  volume = {37},
  pages = {60--75},
  month = {December},
  acmid = {636528},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/636517.636528},
  issn = {0362-1340},
  issue = {12},
  keywords = {Meta programming, templates},
  numpages = {16},
  publisher = {ACM},
  url = {http://doi.acm.org/10.1145/636517.636528}
}

@INPROCEEDINGS{DBLP:conf/icess/Taha04,
  author = {Walid Taha},
  title = {Resource-Aware Programming},
  booktitle = {{ICESS}},
  year = {2004},
  pages = {38-43},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  ee = {http://dx.doi.org/10.1007/11535409_6}
}

@INPROCEEDINGS{Taha03generatingheap-bounded,
  author = {Walid Taha and Stephan Ellner and Hongwei Xi},
  title = {Generating heap-bounded programs in a functional setting},
  booktitle = {{EMSOFT}},
  year = {2003},
  pages = {340--355},
  publisher = {Springer}
}

@INPROCEEDINGS{Taha-MetaML,
  author = {Taha, Walid and Sheard, Tim},
  title = {{MetaML}: Multi-stage programming with explicit annotations},
  booktitle = {Proceedings of the 1997 ACM SIGPLAN symposium on partial evaluation
	and semantics-based program manipulation},
  year = {1997},
  series = {PEPM '97},
  pages = {203--217},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {259019},
  doi = {http://doi.acm.org/10.1145/258993.259019},
  isbn = {0-89791-917-3},
  location = {Amsterdam, The Netherlands},
  numpages = {15},
  url = {http://doi.acm.org/10.1145/258993.259019}
}

@MASTERSTHESIS{watson-masters-2013,
  author = {Michael Watson},
  title = {Type Checking Implementation in Scalaness/NesT},
  school = {University of Vermont},
  year = {2013},
  owner = {Peter C. Chapin},
  timestamp = {2013-10-08}
}

@INPROCEEDINGS{Westbrook-Mint,
  author = {Westbrook, Edwin and Ricken, Mathias and Inoue, Jun and Yao, Yilong
	and Abdelatif, Tamer and Taha, Walid},
  title = {Mint: Java multi-stage programming using weak separability},
  booktitle = {Proceedings of the 2010 ACM SIGPLAN conference on Programming language
	design and implementation},
  year = {2010},
  series = {PLDI '10},
  pages = {400--411},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1806642},
  doi = {http://doi.acm.org/10.1145/1806596.1806642},
  isbn = {978-1-4503-0019-3},
  keywords = {java, multi-stage programming, multi-staged languages, type systems},
  location = {Toronto, Ontario, Canada},
  numpages = {12},
  url = {http://doi.acm.org/10.1145/1806596.1806642}
}

